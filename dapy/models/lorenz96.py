"""Model with one-dimensional spatial extent and chaotic non-linear dynamics.

Model originally proposed in:

> Lorenz, Edward (1996).
> Predictability – A problem partly solved.
> Seminar on Predictability, Vol. I, ECMWF.
"""

import numpy as np
from dapy.models.base import (
    DiagonalGaussianIntegratorModel, inherit_docstrings)
from dapy.models.lorenz96integrator import Lorenz96Integrator


@inherit_docstrings
class Lorenz96Model(DiagonalGaussianIntegratorModel):
    """Model with 1D spatial extent and chaotic non-linear dynamics.

    Model dynamics defined by the system of ODEs

        dz[j]/dt = -z[j-1]* (z[j+1] - z[j-2]) / (3 * delta) - z[j] + force

    with addition and subtraction of indices modulo N where N is the number
    of grid points along the spatial direction, corresponding to periodic
    boundary conditions. The `force` value represents a forcing constant and
    `delta` the grid spacing.

    An implicit mid-point method (with fixed point iteration to solve for the
    update) is used here to integrate the system from an initial state with
    a diagonal Gaussian distribution. The observations are assumed to be
    generated given states generated by integrating forward the dynamics by a
    fixed time interval (the product of the intergrator time step and the
    number of steps per update). Optionally as well as the numerical
    integration based state update, additive Gaussian noise may be also
    included in these fixed interval state updates to represent the
    accumulated model error. The observations are assumed to be computed as a
    possibly non-linear function of the state plus additive Gaussian
    observation noise.

    References:
        Lorenz, Edward (1996). Predictability – A problem partly solved.
        Seminar on Predictability, Vol. I, ECMWF.
    """

    def __init__(self, rng, dim_z=40, init_state_mean=0., init_state_std=1.,
                 state_noise_std=None, observation_func=lambda z, t: z,
                 obser_noise_std=5., delta=1./3., force=8., dt=0.005,
                 n_steps_per_update=20, tol=1e-8, max_iters=100, n_threads=4):
        """
        Args:
            rng (RandomState): Numpy RandomState random number generator.
            dim_z (integer): Dimension of state vector, here corresponding to
                number of grid points in spatial dimension.
            init_state_mean (float or array): Initial state distribution mean.
                Either a scalar or array of shape `(3,)`.
            init_state_std (float or array): Initial state distribution
                standard deviation. Either a scalar or array of shape `(3,)`.
            state_noise_std (float or array): Standard deviation of additive
                Gaussian noise in state update. Either a scalar or array of
                shape `(3,)`. Noise in each dimension assumed to be independent
                i.e. a diagonal noise covariance. If zero or None deterministic
                dynamics are assumed.
            observation_func (function): Function mapping from states to
                 observations, prior to addition of observation noise. Defaults
                 to identity function.
            obser_noise_std (float): Standard deviation of additive Gaussian
                noise in observations. Either a scalar or array of shape
                `(3,)`. Noise in each dimension assumed to be independent
                i.e. a diagonal noise covariance.
            delta (float): Grid spacing parameter for state update.
            force (float): Forcing constant in state update.
            dt (float): Time step for implicit mid-point integrator.
            n_steps_per_update (int): Number of integrator time-steps between
                successive observations and generated states.
            tol (float): Convergence tolerance for fixed point iteration.
            max_iters (int): Maximum number of iterations in fixed-point
                iterative solution of implicit update. ConvergenceError
                exception raised if iteration fails to converge within
                specified number.
            n_threads (int): Number of threads to parallelise model dynamics
                integration over.
        """
        self.force = force
        self.delta = delta
        self.dt = dt
        self.n_steps_per_update = n_steps_per_update
        self.tol = tol
        self.max_iters = max_iters
        self.n_threads = n_threads
        self.observation_func = observation_func
        dim_x = observation_func(np.zeros(dim_z)).shape[0]
        integrator = Lorenz96Integrator(
            dim_z=dim_z, force=force, delta=delta, dt=dt, tol=tol,
            n_steps_per_update=n_steps_per_update, max_iters=max_iters,
            n_threads=n_threads
        )
        super(Lorenz96Model, self).__init__(
            integrator=integrator, dim_z=dim_z, dim_x=dim_x, rng=rng,
            init_state_mean=init_state_mean, init_state_std=init_state_std,
            state_noise_std=state_noise_std, obser_noise_std=obser_noise_std
        )
